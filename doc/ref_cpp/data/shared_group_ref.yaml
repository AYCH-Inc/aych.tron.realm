#
# C++ reference documentation for Shared Group class
#

#UNDOCUMENTED: [commit, to_json, get_table_typed]
ID         : class_shared_group
TITLE      : SharedGroup
SUMMARY    : &g_shared_group_summary
             Sharing groups
DESCR      : &g_shared_group_descr
             This class enables you to shared tables across running applications.
SEE        : 
EXAMPLES: 
- DESCR    : 
  CODE     : ex_cpp_shared_group_intro
IGNORE     : []
CATEGORIES:
- Constructor:
  METHODS:
  - g_shared_group_constructor:
      NAMES    : Group
      SUMMARY  : &g_shared_group_constructor_summary
                 Create a shared group.
      DESCR    : &g_shared_group_constructor_descr
                 >
                 Groups can be shared across running applications.
      SIGNATURE: >
                 SharedGroup(const char* path_to_database_file);
                 struct replication_tag {};
                 SharedGroup(replication_tag, const char* path_to_database_file = 0);
      PARAMS:                 
      - NAME   : path_to_database_file
        TYPES  : const char* 
        DESCR  : Path to a TightDB data file
      RETURN:                 
        TYPES  : SharedGroup
        DESCR  : A shared group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_constructor
        DESCR  : 
- Utilities:
  METHODS:
  - g_shared_group_is_valid:
      NAMES    : is_valid
      SUMMARY  : &g_shared_group_is_valid_summary
                 Is shared group valid?
      DESCR    : &g_shared_group_is_valid_descr
                 >
                 This method tests the consistency/validity of a shared group.
      RETURN:
        TYPES  : bool
        DESCR  : <code>true</code> is consistent/valid, <code>false</code> otherwise.
      EXAMPLES:
      - CODE   : ex_cpp_shared_group_is_valid
        DESCR  :
- Transactions:
  METHODS:
  - g_shared_group_begin_write:
      NAMES    : begin_write
      SUMMARY  : &g_shared_group_begin_write_summary
                 Initiate a transaction
      DESCR    : &g_shared_group_begin_write_descr
                 Begin writing to a shared group.
      RETURN:                 
        TYPES  : Group&
        DESCR  : A group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_begin_write
        DESCR  : 
  - g_shared_group_begin_commit:
      NAMES    : commit
      SUMMARY  : &g_shared_group_commit_summary
                 Commit a transaction
      DESCR    : &g_shared_group_commit_descr
                 This method closes a transaction and changes are written to the group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_commit
        DESCR  : 
  - g_shared_group_rollback:
      NAMES    : rollback
      SUMMARY  : &g_shared_group_rollback_summary
                 Rollback a transaction
      DESCR    : &g_shared_group_rollback_descr
                 This method descards all changes.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_rollback
        DESCR  : 
  - g_shared_group_interrupt_transact:
      NAMES    : interrupt_transact
      SUMMARY  : &g_shared_group_interrupt_transact_summary
                 Interrupt any blocking call.
      DESCR    : &g_shared_group_interrupt_transact_descr
                 >
                 This function may be called asynchronously to interrupt any
                 blocking call that is part of a transaction in a replication
                 setup. Only {@link g_shared_group_begin_write} and 
                 modifying function that are part
                 of a write transaction can block. The transaction is
                 interrupted only if such a call is blocked or would
                 block. This function may be called from a different thread. It
                 may not be called directly from a system signal handler. When
                 a transaction is interrupted, the only valid member function
                 to call is {@link g_shared_group_rollback}. If a client calls
                 {@link g_shared_group_clear_interrupt_transact} after having 
                 called {@link g_shared_group_rollback}, it
                 may then resume normal operation on this database. Currently,
                 transaction interruption works by throwing an exception from
                 one of the mentioned member functions that may block.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_interrupt_transact 
        DESCR  : 
  - g_shared_group_clear_interrupt_transact:
      NAMES    : clear_interrupt_transact
      SUMMARY  : &g_shared_group_clear_interrupt_transact_summary
                 Clean up interrupted state.
      DESCR    : &g_shared_group_clear_interrupt_transact_descr
                 >
                 Clear the interrupted state of this database after rolling
                 back a transaction. It is not an error to call this function
                 in a situation where no interruption has occured. 
      SEE      : g_shared_group_interrupt_transact
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_clear_interrupt_transact 
        DESCR  : 
- Read:
  METHODS:
  - g_shared_group_begin_read:
      NAMES    : begin_read
      SUMMARY  : &g_shared_group_begin_read_summary
                 Initiate reading.
      DESCR    : &g_shared_group_begin_read_descr
                 Begin reading from a shared group.
      CONST    : True             
      RETURN:                 
        TYPES  : Group&
        DESCR  : A group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_begin_read
        DESCR  : 
  - g_shared_group_end_read:
      NAMES    : end_read
      SUMMARY  : &g_shared_group_end_read_summary
                 Stop reading from a group.
      DESCR    : &g_shared_group_end_read_descr
                 This method stops reading from a shared group.
      EXAMPLES:                  
      - CODE   : ex_cpp_shared_group_end_read
        DESCR  : 

